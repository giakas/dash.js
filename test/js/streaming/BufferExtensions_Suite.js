	if(window.location.href.indexOf("runner.html")>0)	{		describe("Buffer Extension Suite", function () {            var bufferExtension,            context,            system;						 beforeEach(function () {                system = new dijon.System();                system.mapValue("system", system);                 system.mapOutlet("system");                context = new Dash.di.DashContext();                system.injectInto(context);            }); 						it("Check Buffer Length with positive values greater than 0",function(){					debugger;				var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					runs(function(){						debugger;						bufferExtensions.decideBufferLength(10).when(function(bufferLength){											expect(isNaN(bufferLength)).not.toBeTruthy();					});									});										});						it("Check Buffer Length with negative values lesser than 0",function(){					var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					runs(function(){						bufferExtensions.decideBufferLength(-1).when(function(bufferLength){											expect(isNaN(bufferLength)).not.toBeTruthy();					});									});											});						it("Check if Buffer Length = 4 with negative values",function(){					var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					runs(function(){						bufferExtensions.decideBufferLength(-1).when(function(bufferLength){											expect(bufferLength).toBe(4);					});									});						});						it("Check if Buffer Length = 4 with string value",function(){					var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					runs(function(){						bufferExtensions.decideBufferLength("test").when(function(bufferLength){											expect(bufferLength).toBe(4);					});									});							});						/* 			it("Check if it should buffer More",function(){					debugger;				var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					bufferExtensions.decideBufferLength(1);								runs(function(){					debugger;					bufferExtensions.shouldBufferMore(5,5).when(function(result){						expect(result).toBe(true);											});									});						});						it("Check if it should buffer More with false case",function(){					var bufferExtensions = MediaPlayer.dependencies.BufferExtensions();					bufferExtensions.decideBufferLength(1);								runs(function(){					bufferExtensions.shouldBufferMore(100,5).when(function(result){						expect(result).toBe(false);											});									});						}); */		});	}